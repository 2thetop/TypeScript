// <auto-generated />
/// <reference path="factory.ts" />
/// <reference path="transform.ts" />
namespace ts.transform {
    function transformerShouldTransformChildrenOfNode(transformer: Transformer, node: Node) {
        return node && transformer && transformer.shouldTransformChildrenOfNode ? transformer.shouldTransformChildrenOfNode(node, transformer) : false;
    }
    export function visitChildren<TNode extends Node>(node: TNode, transformer: Transformer): TNode;
    export function visitChildren(node: Node, transformer: Transformer): Node {
        if (!transformerShouldTransformChildrenOfNode(transformer, node)) return node;
        switch (node.kind) {
            case SyntaxKind.QualifiedName:
                return factory.updateQualifiedName(
                    <QualifiedName>node, 
                    visit((<QualifiedName>node).left, transformer), 
                    visit((<QualifiedName>node).right, transformer));
            case SyntaxKind.ComputedPropertyName:
                return factory.updateComputedPropertyName(
                    <ComputedPropertyName>node, 
                    visit((<ComputedPropertyName>node).expression, transformer));
            case SyntaxKind.TypeParameter:
                return factory.updateTypeParameter(
                    <TypeParameterDeclaration>node, 
                    visit((<TypeParameterDeclaration>node).name, transformer), 
                    visit((<TypeParameterDeclaration>node).constraint, transformer), 
                    visit((<TypeParameterDeclaration>node).expression, transformer));
            case SyntaxKind.Parameter:
                return factory.updateParameter(
                    <ParameterDeclaration>node, 
                    visitNodes((<ParameterDeclaration>node).decorators, transformer), 
                    <ModifiersArray>visitNodes((<ParameterDeclaration>node).modifiers, transformer), 
                    visit((<ParameterDeclaration>node).dotDotDotToken, transformer), 
                    visit((<ParameterDeclaration>node).name, transformer), 
                    visit((<ParameterDeclaration>node).questionToken, transformer), 
                    visit((<ParameterDeclaration>node).type, transformer), 
                    visit((<ParameterDeclaration>node).initializer, transformer));
            case SyntaxKind.Decorator:
                return factory.updateDecorator(
                    <Decorator>node, 
                    visit((<Decorator>node).expression, transformer));
            case SyntaxKind.PropertySignature:
                return factory.updatePropertySignature(
                    <PropertyDeclaration>node, 
                    visit((<PropertyDeclaration>node).name, transformer), 
                    visit((<PropertyDeclaration>node).questionToken, transformer), 
                    visit((<PropertyDeclaration>node).type, transformer));
            case SyntaxKind.PropertyDeclaration:
                return factory.updatePropertyDeclaration(
                    <PropertyDeclaration>node, 
                    visitNodes((<PropertyDeclaration>node).decorators, transformer), 
                    <ModifiersArray>visitNodes((<PropertyDeclaration>node).modifiers, transformer), 
                    visit((<PropertyDeclaration>node).name, transformer), 
                    visit((<PropertyDeclaration>node).questionToken, transformer), 
                    visit((<PropertyDeclaration>node).type, transformer), 
                    visit((<PropertyDeclaration>node).initializer, transformer));
            case SyntaxKind.MethodSignature:
                return factory.updateMethodSignature(
                    <MethodDeclaration>node, 
                    visit((<MethodDeclaration>node).name, transformer), 
                    visit((<MethodDeclaration>node).questionToken, transformer), 
                    visitNodes((<MethodDeclaration>node).typeParameters, transformer), 
                    visitNodes((<MethodDeclaration>node).parameters, transformer), 
                    visit((<MethodDeclaration>node).type, transformer));
            case SyntaxKind.MethodDeclaration:
                return factory.updateMethodDeclaration(
                    <MethodDeclaration>node, 
                    visitNodes((<MethodDeclaration>node).decorators, transformer), 
                    <ModifiersArray>visitNodes((<MethodDeclaration>node).modifiers, transformer), 
                    visit((<MethodDeclaration>node).asteriskToken, transformer), 
                    visit((<MethodDeclaration>node).name, transformer), 
                    visitNodes((<MethodDeclaration>node).typeParameters, transformer), 
                    visitNodes((<MethodDeclaration>node).parameters, transformer), 
                    visit((<MethodDeclaration>node).type, transformer), 
                    visit((<MethodDeclaration>node).body, transformer));
            case SyntaxKind.Constructor:
                return factory.updateConstructor(
                    <ConstructorDeclaration>node, 
                    visitNodes((<ConstructorDeclaration>node).decorators, transformer), 
                    <ModifiersArray>visitNodes((<ConstructorDeclaration>node).modifiers, transformer), 
                    visitNodes((<ConstructorDeclaration>node).parameters, transformer), 
                    visit((<ConstructorDeclaration>node).type, transformer), 
                    visit((<ConstructorDeclaration>node).body, transformer));
            case SyntaxKind.GetAccessor:
                return factory.updateGetAccessor(
                    <AccessorDeclaration>node, 
                    visitNodes((<AccessorDeclaration>node).decorators, transformer), 
                    <ModifiersArray>visitNodes((<AccessorDeclaration>node).modifiers, transformer), 
                    visit((<AccessorDeclaration>node).name, transformer), 
                    visitNodes((<AccessorDeclaration>node).parameters, transformer), 
                    visit((<AccessorDeclaration>node).type, transformer), 
                    visit((<AccessorDeclaration>node).body, transformer));
            case SyntaxKind.SetAccessor:
                return factory.updateSetAccessor(
                    <AccessorDeclaration>node, 
                    visitNodes((<AccessorDeclaration>node).decorators, transformer), 
                    <ModifiersArray>visitNodes((<AccessorDeclaration>node).modifiers, transformer), 
                    visit((<AccessorDeclaration>node).name, transformer), 
                    visitNodes((<AccessorDeclaration>node).parameters, transformer), 
                    visit((<AccessorDeclaration>node).type, transformer), 
                    visit((<AccessorDeclaration>node).body, transformer));
            case SyntaxKind.CallSignature:
                return factory.updateCallSignature(
                    <SignatureDeclaration>node, 
                    visitNodes((<SignatureDeclaration>node).typeParameters, transformer), 
                    visitNodes((<SignatureDeclaration>node).parameters, transformer), 
                    visit((<SignatureDeclaration>node).type, transformer));
            case SyntaxKind.ConstructSignature:
                return factory.updateConstructSignature(
                    <SignatureDeclaration>node, 
                    visitNodes((<SignatureDeclaration>node).typeParameters, transformer), 
                    visitNodes((<SignatureDeclaration>node).parameters, transformer), 
                    visit((<SignatureDeclaration>node).type, transformer));
            case SyntaxKind.IndexSignature:
                return factory.updateIndexSignature(
                    <IndexSignatureDeclaration>node, 
                    visitNodes((<IndexSignatureDeclaration>node).decorators, transformer), 
                    <ModifiersArray>visitNodes((<IndexSignatureDeclaration>node).modifiers, transformer), 
                    visitNodes((<IndexSignatureDeclaration>node).parameters, transformer), 
                    visit((<IndexSignatureDeclaration>node).type, transformer));
            case SyntaxKind.TypePredicate:
                return factory.updateTypePredicate(
                    <TypePredicateNode>node, 
                    visit((<TypePredicateNode>node).parameterName, transformer), 
                    visit((<TypePredicateNode>node).type, transformer));
            case SyntaxKind.TypeReference:
                return factory.updateTypeReference(
                    <TypeReferenceNode>node, 
                    visit((<TypeReferenceNode>node).typeName, transformer), 
                    visitNodes((<TypeReferenceNode>node).typeArguments, transformer));
            case SyntaxKind.FunctionType:
                return factory.updateFunctionType(
                    <FunctionOrConstructorTypeNode>node, 
                    visitNodes((<FunctionOrConstructorTypeNode>node).typeParameters, transformer), 
                    visitNodes((<FunctionOrConstructorTypeNode>node).parameters, transformer), 
                    visit((<FunctionOrConstructorTypeNode>node).type, transformer));
            case SyntaxKind.ConstructorType:
                return factory.updateConstructorType(
                    <FunctionOrConstructorTypeNode>node, 
                    visitNodes((<FunctionOrConstructorTypeNode>node).typeParameters, transformer), 
                    visitNodes((<FunctionOrConstructorTypeNode>node).parameters, transformer), 
                    visit((<FunctionOrConstructorTypeNode>node).type, transformer));
            case SyntaxKind.TypeQuery:
                return factory.updateTypeQuery(
                    <TypeQueryNode>node, 
                    visit((<TypeQueryNode>node).exprName, transformer));
            case SyntaxKind.TypeLiteral:
                return factory.updateTypeLiteral(
                    <TypeLiteralNode>node, 
                    visitNodes((<TypeLiteralNode>node).members, transformer));
            case SyntaxKind.ArrayType:
                return factory.updateArrayType(
                    <ArrayTypeNode>node, 
                    visit((<ArrayTypeNode>node).elementType, transformer));
            case SyntaxKind.TupleType:
                return factory.updateTupleType(
                    <TupleTypeNode>node, 
                    visitNodes((<TupleTypeNode>node).elementTypes, transformer));
            case SyntaxKind.UnionType:
                return factory.updateUnionType(
                    <UnionTypeNode>node, 
                    visitNodes((<UnionTypeNode>node).types, transformer));
            case SyntaxKind.ParenthesizedType:
                return factory.updateParenthesizedType(
                    <ParenthesizedTypeNode>node, 
                    visit((<ParenthesizedTypeNode>node).type, transformer));
            case SyntaxKind.ObjectBindingPattern:
                return factory.updateObjectBindingPattern(
                    <BindingPattern>node, 
                    visitNodes((<BindingPattern>node).elements, transformer));
            case SyntaxKind.ArrayBindingPattern:
                return factory.updateArrayBindingPattern(
                    <BindingPattern>node, 
                    visitNodes((<BindingPattern>node).elements, transformer));
            case SyntaxKind.BindingElement:
                return factory.updateBindingElement(
                    <BindingElement>node, 
                    visit((<BindingElement>node).propertyName, transformer), 
                    visit((<BindingElement>node).dotDotDotToken, transformer), 
                    visit((<BindingElement>node).name, transformer), 
                    visit((<BindingElement>node).initializer, transformer));
            case SyntaxKind.ArrayLiteralExpression:
                return factory.updateArrayLiteralExpression(
                    <ArrayLiteralExpression>node, 
                    visitNodes((<ArrayLiteralExpression>node).elements, transformer));
            case SyntaxKind.ObjectLiteralExpression:
                return factory.updateObjectLiteralExpression(
                    <ObjectLiteralExpression>node, 
                    visitNodes((<ObjectLiteralExpression>node).properties, transformer));
            case SyntaxKind.PropertyAccessExpression:
                return factory.updatePropertyAccessExpression(
                    <PropertyAccessExpression>node, 
                    visit((<PropertyAccessExpression>node).expression, transformer), 
                    visit((<PropertyAccessExpression>node).dotToken, transformer), 
                    visit((<PropertyAccessExpression>node).name, transformer));
            case SyntaxKind.ElementAccessExpression:
                return factory.updateElementAccessExpression(
                    <ElementAccessExpression>node, 
                    visit((<ElementAccessExpression>node).expression, transformer), 
                    visit((<ElementAccessExpression>node).argumentExpression, transformer));
            case SyntaxKind.CallExpression:
                return factory.updateCallExpression(
                    <CallExpression>node, 
                    visit((<CallExpression>node).expression, transformer), 
                    visitNodes((<CallExpression>node).typeArguments, transformer), 
                    visitNodes((<CallExpression>node).arguments, transformer));
            case SyntaxKind.NewExpression:
                return factory.updateNewExpression(
                    <NewExpression>node, 
                    visit((<NewExpression>node).expression, transformer), 
                    visitNodes((<NewExpression>node).typeArguments, transformer), 
                    visitNodes((<NewExpression>node).arguments, transformer));
            case SyntaxKind.TaggedTemplateExpression:
                return factory.updateTaggedTemplateExpression(
                    <TaggedTemplateExpression>node, 
                    visit((<TaggedTemplateExpression>node).tag, transformer), 
                    visit((<TaggedTemplateExpression>node).template, transformer));
            case SyntaxKind.TypeAssertionExpression:
                return factory.updateTypeAssertionExpression(
                    <TypeAssertion>node, 
                    visit((<TypeAssertion>node).type, transformer), 
                    visit((<TypeAssertion>node).expression, transformer));
            case SyntaxKind.ParenthesizedExpression:
                return factory.updateParenthesizedExpression(
                    <ParenthesizedExpression>node, 
                    visit((<ParenthesizedExpression>node).expression, transformer));
            case SyntaxKind.FunctionExpression:
                return factory.updateFunctionExpression(
                    <FunctionExpression>node, 
                    visitNodes((<FunctionExpression>node).decorators, transformer), 
                    <ModifiersArray>visitNodes((<FunctionExpression>node).modifiers, transformer), 
                    visit((<FunctionExpression>node).asteriskToken, transformer), 
                    visit((<FunctionExpression>node).name, transformer), 
                    visitNodes((<FunctionExpression>node).typeParameters, transformer), 
                    visitNodes((<FunctionExpression>node).parameters, transformer), 
                    visit((<FunctionExpression>node).type, transformer), 
                    visit((<FunctionExpression>node).body, transformer));
            case SyntaxKind.ArrowFunction:
                return factory.updateArrowFunction(
                    <ArrowFunction>node, 
                    visitNodes((<ArrowFunction>node).decorators, transformer), 
                    <ModifiersArray>visitNodes((<ArrowFunction>node).modifiers, transformer), 
                    visitNodes((<ArrowFunction>node).typeParameters, transformer), 
                    visitNodes((<ArrowFunction>node).parameters, transformer), 
                    visit((<ArrowFunction>node).type, transformer), 
                    visit((<ArrowFunction>node).equalsGreaterThanToken, transformer), 
                    visit((<ArrowFunction>node).body, transformer));
            case SyntaxKind.DeleteExpression:
                return factory.updateDeleteExpression(
                    <DeleteExpression>node, 
                    visit((<DeleteExpression>node).expression, transformer));
            case SyntaxKind.TypeOfExpression:
                return factory.updateTypeOfExpression(
                    <TypeOfExpression>node, 
                    visit((<TypeOfExpression>node).expression, transformer));
            case SyntaxKind.VoidExpression:
                return factory.updateVoidExpression(
                    <VoidExpression>node, 
                    visit((<VoidExpression>node).expression, transformer));
            case SyntaxKind.PrefixUnaryExpression:
                return factory.updatePrefixUnaryExpression(
                    <PrefixUnaryExpression>node, 
                    visit((<PrefixUnaryExpression>node).operand, transformer));
            case SyntaxKind.PostfixUnaryExpression:
                return factory.updatePostfixUnaryExpression(
                    <PostfixUnaryExpression>node, 
                    visit((<PostfixUnaryExpression>node).operand, transformer));
            case SyntaxKind.BinaryExpression:
                return factory.updateBinaryExpression(
                    <BinaryExpression>node, 
                    visit((<BinaryExpression>node).left, transformer), 
                    visit((<BinaryExpression>node).operatorToken, transformer), 
                    visit((<BinaryExpression>node).right, transformer));
            case SyntaxKind.ConditionalExpression:
                return factory.updateConditionalExpression(
                    <ConditionalExpression>node, 
                    visit((<ConditionalExpression>node).condition, transformer), 
                    visit((<ConditionalExpression>node).questionToken, transformer), 
                    visit((<ConditionalExpression>node).whenTrue, transformer), 
                    visit((<ConditionalExpression>node).colonToken, transformer), 
                    visit((<ConditionalExpression>node).whenFalse, transformer));
            case SyntaxKind.TemplateExpression:
                return factory.updateTemplateExpression(
                    <TemplateExpression>node, 
                    visit((<TemplateExpression>node).head, transformer), 
                    visitNodes((<TemplateExpression>node).templateSpans, transformer));
            case SyntaxKind.YieldExpression:
                return factory.updateYieldExpression(
                    <YieldExpression>node, 
                    visit((<YieldExpression>node).asteriskToken, transformer), 
                    visit((<YieldExpression>node).expression, transformer));
            case SyntaxKind.SpreadElementExpression:
                return factory.updateSpreadElementExpression(
                    <SpreadElementExpression>node, 
                    visit((<SpreadElementExpression>node).expression, transformer));
            case SyntaxKind.ClassExpression:
                return factory.updateClassExpression(
                    <ClassExpression>node, 
                    visitNodes((<ClassExpression>node).decorators, transformer), 
                    <ModifiersArray>visitNodes((<ClassExpression>node).modifiers, transformer), 
                    visit((<ClassExpression>node).name, transformer), 
                    visitNodes((<ClassExpression>node).typeParameters, transformer), 
                    visitNodes((<ClassExpression>node).heritageClauses, transformer), 
                    visitNodes((<ClassExpression>node).members, transformer));
            case SyntaxKind.ExpressionWithTypeArguments:
                return factory.updateExpressionWithTypeArguments(
                    <ExpressionWithTypeArguments>node, 
                    visit((<ExpressionWithTypeArguments>node).expression, transformer), 
                    visitNodes((<ExpressionWithTypeArguments>node).typeArguments, transformer));
            case SyntaxKind.TemplateSpan:
                return factory.updateTemplateSpan(
                    <TemplateSpan>node, 
                    visit((<TemplateSpan>node).expression, transformer), 
                    visit((<TemplateSpan>node).literal, transformer));
            case SyntaxKind.SemicolonClassElement:
                return factory.updateSemicolonClassElement(
                    <SemicolonClassElement>node, 
                    visitNodes((<SemicolonClassElement>node).decorators, transformer), 
                    <ModifiersArray>visitNodes((<SemicolonClassElement>node).modifiers, transformer), 
                    visit((<SemicolonClassElement>node).name, transformer));
            case SyntaxKind.Block:
                return factory.updateBlock(
                    <Block>node, 
                    visitNodes((<Block>node).statements, transformer));
            case SyntaxKind.VariableStatement:
                return factory.updateVariableStatement(
                    <VariableStatement>node, 
                    visit((<VariableStatement>node).declarationList, transformer));
            case SyntaxKind.ExpressionStatement:
                return factory.updateExpressionStatement(
                    <ExpressionStatement>node, 
                    visit((<ExpressionStatement>node).expression, transformer));
            case SyntaxKind.IfStatement:
                return factory.updateIfStatement(
                    <IfStatement>node, 
                    visit((<IfStatement>node).expression, transformer), 
                    visit((<IfStatement>node).thenStatement, transformer), 
                    visit((<IfStatement>node).elseStatement, transformer));
            case SyntaxKind.DoStatement:
                return factory.updateDoStatement(
                    <DoStatement>node, 
                    visit((<DoStatement>node).statement, transformer), 
                    visit((<DoStatement>node).expression, transformer));
            case SyntaxKind.WhileStatement:
                return factory.updateWhileStatement(
                    <WhileStatement>node, 
                    visit((<WhileStatement>node).expression, transformer), 
                    visit((<WhileStatement>node).statement, transformer));
            case SyntaxKind.ForStatement:
                return factory.updateForStatement(
                    <ForStatement>node, 
                    visit((<ForStatement>node).initializer, transformer), 
                    visit((<ForStatement>node).condition, transformer), 
                    visit((<ForStatement>node).incrementor, transformer), 
                    visit((<ForStatement>node).statement, transformer));
            case SyntaxKind.ForInStatement:
                return factory.updateForInStatement(
                    <ForInStatement>node, 
                    visit((<ForInStatement>node).initializer, transformer), 
                    visit((<ForInStatement>node).expression, transformer), 
                    visit((<ForInStatement>node).statement, transformer));
            case SyntaxKind.ForOfStatement:
                return factory.updateForOfStatement(
                    <ForOfStatement>node, 
                    visit((<ForOfStatement>node).initializer, transformer), 
                    visit((<ForOfStatement>node).expression, transformer), 
                    visit((<ForOfStatement>node).statement, transformer));
            case SyntaxKind.ContinueStatement:
                return factory.updateContinueStatement(
                    <BreakOrContinueStatement>node, 
                    visit((<BreakOrContinueStatement>node).label, transformer));
            case SyntaxKind.BreakStatement:
                return factory.updateBreakStatement(
                    <BreakOrContinueStatement>node, 
                    visit((<BreakOrContinueStatement>node).label, transformer));
            case SyntaxKind.ReturnStatement:
                return factory.updateReturnStatement(
                    <ReturnStatement>node, 
                    visit((<ReturnStatement>node).expression, transformer));
            case SyntaxKind.WithStatement:
                return factory.updateWithStatement(
                    <WithStatement>node, 
                    visit((<WithStatement>node).expression, transformer), 
                    visit((<WithStatement>node).statement, transformer));
            case SyntaxKind.SwitchStatement:
                return factory.updateSwitchStatement(
                    <SwitchStatement>node, 
                    visit((<SwitchStatement>node).expression, transformer), 
                    visit((<SwitchStatement>node).caseBlock, transformer));
            case SyntaxKind.LabeledStatement:
                return factory.updateLabeledStatement(
                    <LabeledStatement>node, 
                    visit((<LabeledStatement>node).label, transformer), 
                    visit((<LabeledStatement>node).statement, transformer));
            case SyntaxKind.ThrowStatement:
                return factory.updateThrowStatement(
                    <ThrowStatement>node, 
                    visit((<ThrowStatement>node).expression, transformer));
            case SyntaxKind.TryStatement:
                return factory.updateTryStatement(
                    <TryStatement>node, 
                    visit((<TryStatement>node).tryBlock, transformer), 
                    visit((<TryStatement>node).catchClause, transformer), 
                    visit((<TryStatement>node).finallyBlock, transformer));
            case SyntaxKind.VariableDeclaration:
                return factory.updateVariableDeclaration(
                    <VariableDeclaration>node, 
                    visitNodes((<VariableDeclaration>node).decorators, transformer), 
                    <ModifiersArray>visitNodes((<VariableDeclaration>node).modifiers, transformer), 
                    visit((<VariableDeclaration>node).name, transformer), 
                    visit((<VariableDeclaration>node).type, transformer), 
                    visit((<VariableDeclaration>node).initializer, transformer));
            case SyntaxKind.VariableDeclarationList:
                return factory.updateVariableDeclarationList(
                    <VariableDeclarationList>node, 
                    visitNodes((<VariableDeclarationList>node).declarations, transformer));
            case SyntaxKind.FunctionDeclaration:
                return factory.updateFunctionDeclaration(
                    <FunctionDeclaration>node, 
                    visitNodes((<FunctionDeclaration>node).decorators, transformer), 
                    <ModifiersArray>visitNodes((<FunctionDeclaration>node).modifiers, transformer), 
                    visit((<FunctionDeclaration>node).asteriskToken, transformer), 
                    visit((<FunctionDeclaration>node).name, transformer), 
                    visitNodes((<FunctionDeclaration>node).typeParameters, transformer), 
                    visitNodes((<FunctionDeclaration>node).parameters, transformer), 
                    visit((<FunctionDeclaration>node).type, transformer), 
                    visit((<FunctionDeclaration>node).body, transformer));
            case SyntaxKind.ClassDeclaration:
                return factory.updateClassDeclaration(
                    <ClassDeclaration>node, 
                    visitNodes((<ClassDeclaration>node).decorators, transformer), 
                    <ModifiersArray>visitNodes((<ClassDeclaration>node).modifiers, transformer), 
                    visit((<ClassDeclaration>node).name, transformer), 
                    visitNodes((<ClassDeclaration>node).typeParameters, transformer), 
                    visitNodes((<ClassDeclaration>node).heritageClauses, transformer), 
                    visitNodes((<ClassDeclaration>node).members, transformer));
            case SyntaxKind.InterfaceDeclaration:
                return factory.updateInterfaceDeclaration(
                    <InterfaceDeclaration>node, 
                    visitNodes((<InterfaceDeclaration>node).decorators, transformer), 
                    <ModifiersArray>visitNodes((<InterfaceDeclaration>node).modifiers, transformer), 
                    visit((<InterfaceDeclaration>node).name, transformer), 
                    visitNodes((<InterfaceDeclaration>node).typeParameters, transformer), 
                    visitNodes((<InterfaceDeclaration>node).heritageClauses, transformer), 
                    visitNodes((<InterfaceDeclaration>node).members, transformer));
            case SyntaxKind.TypeAliasDeclaration:
                return factory.updateTypeAliasDeclaration(
                    <TypeAliasDeclaration>node, 
                    visitNodes((<TypeAliasDeclaration>node).decorators, transformer), 
                    <ModifiersArray>visitNodes((<TypeAliasDeclaration>node).modifiers, transformer), 
                    visit((<TypeAliasDeclaration>node).name, transformer), 
                    visitNodes((<TypeAliasDeclaration>node).typeParameters, transformer), 
                    visit((<TypeAliasDeclaration>node).type, transformer));
            case SyntaxKind.EnumDeclaration:
                return factory.updateEnumDeclaration(
                    <EnumDeclaration>node, 
                    visitNodes((<EnumDeclaration>node).decorators, transformer), 
                    <ModifiersArray>visitNodes((<EnumDeclaration>node).modifiers, transformer), 
                    visit((<EnumDeclaration>node).name, transformer), 
                    visitNodes((<EnumDeclaration>node).members, transformer));
            case SyntaxKind.ModuleDeclaration:
                return factory.updateModuleDeclaration(
                    <ModuleDeclaration>node, 
                    visitNodes((<ModuleDeclaration>node).decorators, transformer), 
                    <ModifiersArray>visitNodes((<ModuleDeclaration>node).modifiers, transformer), 
                    visit((<ModuleDeclaration>node).name, transformer), 
                    visit((<ModuleDeclaration>node).body, transformer));
            case SyntaxKind.ModuleBlock:
                return factory.updateModuleBlock(
                    <ModuleBlock>node, 
                    visitNodes((<ModuleBlock>node).statements, transformer));
            case SyntaxKind.CaseBlock:
                return factory.updateCaseBlock(
                    <CaseBlock>node, 
                    visitNodes((<CaseBlock>node).clauses, transformer));
            case SyntaxKind.ImportEqualsDeclaration:
                return factory.updateImportEqualsDeclaration(
                    <ImportEqualsDeclaration>node, 
                    visitNodes((<ImportEqualsDeclaration>node).decorators, transformer), 
                    <ModifiersArray>visitNodes((<ImportEqualsDeclaration>node).modifiers, transformer), 
                    visit((<ImportEqualsDeclaration>node).name, transformer), 
                    visit((<ImportEqualsDeclaration>node).moduleReference, transformer));
            case SyntaxKind.ImportDeclaration:
                return factory.updateImportDeclaration(
                    <ImportDeclaration>node, 
                    visit((<ImportDeclaration>node).importClause, transformer), 
                    visit((<ImportDeclaration>node).moduleSpecifier, transformer));
            case SyntaxKind.ImportClause:
                return factory.updateImportClause(
                    <ImportClause>node, 
                    visitNodes((<ImportClause>node).decorators, transformer), 
                    <ModifiersArray>visitNodes((<ImportClause>node).modifiers, transformer), 
                    visit((<ImportClause>node).name, transformer), 
                    visit((<ImportClause>node).namedBindings, transformer));
            case SyntaxKind.NamespaceImport:
                return factory.updateNamespaceImport(
                    <NamespaceImport>node, 
                    visitNodes((<NamespaceImport>node).decorators, transformer), 
                    <ModifiersArray>visitNodes((<NamespaceImport>node).modifiers, transformer), 
                    visit((<NamespaceImport>node).name, transformer));
            case SyntaxKind.NamedImports:
                return factory.updateNamedImports(
                    <NamedImports>node, 
                    visitNodes((<NamedImports>node).elements, transformer));
            case SyntaxKind.ImportSpecifier:
                return factory.updateImportSpecifier(
                    <ImportSpecifier>node, 
                    visit((<ImportSpecifier>node).propertyName, transformer), 
                    visit((<ImportSpecifier>node).name, transformer));
            case SyntaxKind.ExportAssignment:
                return factory.updateExportAssignment(
                    <ExportAssignment>node, 
                    visitNodes((<ExportAssignment>node).decorators, transformer), 
                    <ModifiersArray>visitNodes((<ExportAssignment>node).modifiers, transformer), 
                    visit((<ExportAssignment>node).expression, transformer));
            case SyntaxKind.ExportDeclaration:
                return factory.updateExportDeclaration(
                    <ExportDeclaration>node, 
                    visitNodes((<ExportDeclaration>node).decorators, transformer), 
                    <ModifiersArray>visitNodes((<ExportDeclaration>node).modifiers, transformer), 
                    visit((<ExportDeclaration>node).exportClause, transformer), 
                    visit((<ExportDeclaration>node).moduleSpecifier, transformer));
            case SyntaxKind.NamedExports:
                return factory.updateNamedExports(
                    <NamedExports>node, 
                    visitNodes((<NamedExports>node).elements, transformer));
            case SyntaxKind.ExportSpecifier:
                return factory.updateExportSpecifier(
                    <ExportSpecifier>node, 
                    visit((<ExportSpecifier>node).propertyName, transformer), 
                    visit((<ExportSpecifier>node).name, transformer));
            case SyntaxKind.ExternalModuleReference:
                return factory.updateExternalModuleReference(
                    <ExternalModuleReference>node, 
                    visit((<ExternalModuleReference>node).expression, transformer));
            case SyntaxKind.CaseClause:
                return factory.updateCaseClause(
                    <CaseClause>node, 
                    visit((<CaseClause>node).expression, transformer), 
                    visitNodes((<CaseClause>node).statements, transformer));
            case SyntaxKind.DefaultClause:
                return factory.updateDefaultClause(
                    <DefaultClause>node, 
                    visitNodes((<DefaultClause>node).statements, transformer));
            case SyntaxKind.HeritageClause:
                return factory.updateHeritageClause(
                    <HeritageClause>node, 
                    visitNodes((<HeritageClause>node).types, transformer));
            case SyntaxKind.CatchClause:
                return factory.updateCatchClause(
                    <CatchClause>node, 
                    visit((<CatchClause>node).variableDeclaration, transformer), 
                    visit((<CatchClause>node).block, transformer));
            case SyntaxKind.PropertyAssignment:
                return factory.updatePropertyAssignment(
                    <PropertyAssignment>node, 
                    visit((<PropertyAssignment>node).name, transformer), 
                    visit((<PropertyAssignment>node).questionToken, transformer), 
                    visit((<PropertyAssignment>node).initializer, transformer));
            case SyntaxKind.ShorthandPropertyAssignment:
                return factory.updateShorthandPropertyAssignment(
                    <ShorthandPropertyAssignment>node, 
                    visit((<ShorthandPropertyAssignment>node).name, transformer), 
                    visit((<ShorthandPropertyAssignment>node).questionToken, transformer));
            case SyntaxKind.EnumMember:
                return factory.updateEnumMember(
                    <EnumMember>node, 
                    visit((<EnumMember>node).name, transformer), 
                    visit((<EnumMember>node).initializer, transformer));
            case SyntaxKind.JSDocTypeExpression:
                return factory.updateJSDocTypeExpression(
                    <JSDocTypeExpression>node, 
                    visit((<JSDocTypeExpression>node).type, transformer));
            case SyntaxKind.JSDocArrayType:
                return factory.updateJSDocArrayType(
                    <JSDocArrayType>node, 
                    visit((<JSDocArrayType>node).elementType, transformer));
            case SyntaxKind.JSDocUnionType:
                return factory.updateJSDocUnionType(
                    <JSDocUnionType>node, 
                    visitNodes((<JSDocUnionType>node).types, transformer));
            case SyntaxKind.JSDocTupleType:
                return factory.updateJSDocTupleType(
                    <JSDocTupleType>node, 
                    visitNodes((<JSDocTupleType>node).types, transformer));
            case SyntaxKind.JSDocNullableType:
                return factory.updateJSDocNullableType(
                    <JSDocNullableType>node, 
                    visit((<JSDocNullableType>node).type, transformer));
            case SyntaxKind.JSDocNonNullableType:
                return factory.updateJSDocNonNullableType(
                    <JSDocNonNullableType>node, 
                    visit((<JSDocNonNullableType>node).type, transformer));
            case SyntaxKind.JSDocRecordType:
                return factory.updateJSDocRecordType(
                    <JSDocRecordType>node, 
                    visitNodes((<JSDocRecordType>node).members, transformer));
            case SyntaxKind.JSDocRecordMember:
                return factory.updateJSDocRecordMember(
                    <JSDocRecordMember>node, 
                    visit((<JSDocRecordMember>node).name, transformer), 
                    visit((<JSDocRecordMember>node).type, transformer));
            case SyntaxKind.JSDocTypeReference:
                return factory.updateJSDocTypeReference(
                    <JSDocTypeReference>node, 
                    visit((<JSDocTypeReference>node).name, transformer), 
                    visitNodes((<JSDocTypeReference>node).typeArguments, transformer));
            case SyntaxKind.JSDocOptionalType:
                return factory.updateJSDocOptionalType(
                    <JSDocOptionalType>node, 
                    visit((<JSDocOptionalType>node).type, transformer));
            case SyntaxKind.JSDocFunctionType:
                return factory.updateJSDocFunctionType(
                    <JSDocFunctionType>node, 
                    visitNodes((<JSDocFunctionType>node).parameters, transformer), 
                    visit((<JSDocFunctionType>node).type, transformer));
            case SyntaxKind.JSDocVariadicType:
                return factory.updateJSDocVariadicType(
                    <JSDocVariadicType>node, 
                    visit((<JSDocVariadicType>node).type, transformer));
            case SyntaxKind.JSDocConstructorType:
                return factory.updateJSDocConstructorType(
                    <JSDocConstructorType>node, 
                    visit((<JSDocConstructorType>node).type, transformer));
            case SyntaxKind.JSDocThisType:
                return factory.updateJSDocThisType(
                    <JSDocThisType>node, 
                    visit((<JSDocThisType>node).type, transformer));
            case SyntaxKind.JSDocComment:
                return factory.updateJSDocComment(
                    <JSDocComment>node, 
                    visitNodes((<JSDocComment>node).tags, transformer));
            case SyntaxKind.JSDocTag:
                return factory.updateJSDocTag(
                    <JSDocTag>node, 
                    visit((<JSDocTag>node).atToken, transformer), 
                    visit((<JSDocTag>node).tagName, transformer));
            case SyntaxKind.JSDocParameterTag:
                return factory.updateJSDocParameterTag(
                    <JSDocParameterTag>node, 
                    visit((<JSDocParameterTag>node).preParameterName, transformer), 
                    visit((<JSDocParameterTag>node).typeExpression, transformer), 
                    visit((<JSDocParameterTag>node).postParameterName, transformer), 
                    visit((<JSDocParameterTag>node).atToken, transformer), 
                    visit((<JSDocParameterTag>node).tagName, transformer));
            case SyntaxKind.JSDocReturnTag:
                return factory.updateJSDocReturnTag(
                    <JSDocReturnTag>node, 
                    visit((<JSDocReturnTag>node).typeExpression, transformer), 
                    visit((<JSDocReturnTag>node).atToken, transformer), 
                    visit((<JSDocReturnTag>node).tagName, transformer));
            case SyntaxKind.JSDocTypeTag:
                return factory.updateJSDocTypeTag(
                    <JSDocTypeTag>node, 
                    visit((<JSDocTypeTag>node).typeExpression, transformer), 
                    visit((<JSDocTypeTag>node).atToken, transformer), 
                    visit((<JSDocTypeTag>node).tagName, transformer));
            case SyntaxKind.JSDocTemplateTag:
                return factory.updateJSDocTemplateTag(
                    <JSDocTemplateTag>node, 
                    visitNodes((<JSDocTemplateTag>node).typeParameters, transformer), 
                    visit((<JSDocTemplateTag>node).atToken, transformer), 
                    visit((<JSDocTemplateTag>node).tagName, transformer));
            default:
                return node;
        }
    }
}
